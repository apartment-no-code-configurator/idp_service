c
exit
DateTime.now.to_i.to_s
DateTime.now.to_i
DateTime.now
new_society_cache[user_id].eql?(session_id)
new_society_cache[user_id] = "" if new_society_cache[user_id].blank?
new_society_cache[user_id].blank?
new_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
society_cache.blank?
user_id = user_id.to_s
    society_cache = Cache.sfetch(aoa_number)
Cache.sadd(aoa_number, new_society_cache.to_json)
Cache.delete(aoa_number)
new_society_cache[user_id] = session_id
new_society_cache[user_id].eql?(session_id)
new_society_cache[user_id] = "" if new_society_cache[user_id].blank?
new_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
society_cache.blank?
user_id = user_id.to_s
    society_cache = Cache.sfetch(aoa_number)
session_id = "testing2"
user_id = 2
Cache.sadd(aoa_number, society_cache)
society_cache = {user_id => session_id}.to_json
society_cache.blank?
society_cache = Cache.sfetch(aoa_number)
user_id = user_id.to_s
session_id = "testing1"
user_id = 1
new_society_cache[2]
new_society_cache
new_society_cache[user_id]
user_id
new_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
new_society_cache[user_id]
session_id
new_society_cache[user_id].eql?(session_id)
new_society_cache[user_id] = "" if new_society_cache[user_id].blank?
new_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
society_cache.blank?
society_cache = Cache.sfetch(aoa_number)
session_id
user_id
Cache.sadd(aoa_number, new_society_cache.to_json)
Cache.delete(aoa_number)
new_society_cache[user_id] = session_id
return if new_society_cache[user_id].eql?(session_id)
new_society_cache[user_id] = "" if new_society_cache[user_id].blank?
new_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
society_cache.blank?
society_cache = Cache.sfetch(aoa_number)
session_id = "testing2"
user_id = 2
Cache.sadd(aoa_number, society_cache)
society_cache = {user_id => session_id}.to_json
society_cache.blank?
society_cache = Cache.sfetch(aoa_number)
user_id = 1
user_id
session_id
Cache.sadd(aoa_number, new_society_cache)
Cache.delete(aoa_number)
Cache.sadd(aoa_number, new_society_cache)
aoa_number
new_society_cache.to_json
new_society_cache
Cache.sadd(aoa_number, new_society_cache.to_json)
Cache.delete(aoa_number)
new_society_cache
Cache.supdate(aoa_number, old_society_cache.to_json, new_society_cache.to_json)
old_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
new_society_cache
old_society_cache
new_society_cache
new_society_cache[user_id] = session_id
new_society_cache[user_id] = ""
new_society_cache[user_id].blank?
new_society_cache = old_society_cache
old_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
session_id = "testing1"
user_id = 2
society_cache = Cache.sfetch(aoa_number)
Cache.sadd(aoa_number, society_cache)
society_cache = {user_id => session_id}.to_json
society_cache.blank?
society_cache = Cache.sfetch(aoa_number)
old_society_cache = JSON.parse(old_society_cache)
old_society_cache = JSON.parse(old_scoiety_cache)
old_society_cache = Cache.sfetch(aoa_number).first
old_society_cache = JSON.parse(Cache.sfetch(aoa_number))
old_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
society_cache.blank?
society_cache = Cache.sfetch(aoa_number)
session_id = "testing1"
user_id = 1
Cache.sadd(aoa_number, society_cache)
society_cache = {user_id => session_id}
society_cache.blank?
society_cache = Cache.sfetch(aoa_number)
{user_id => ""} 
old_society_cache = Cache.sfetch(aoa_number)
old_society_cache
old_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
    new_society_cache = old_society_cache
society_cache = Cache.sfetch(aoa_number)
    Cache.sadd(society, {}) if society_cache.blank?
user_id = 2
new_society_cache[user_id] = session_id
    Cache.supdate(aoa_number, old_society_cache, new_society_cache)
return if new_society_cache[user_id].eql?(session_id)
new_society_cache[user_id] = "" if new_society_cache[user_id].blank?
old_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
    new_society_cache = old_society_cache
society_cache = Cache.sfetch(aoa_number)
    Cache.sadd(society, {}) if society_cache.blank?
Cache.supdate(aoa_number, old_society_cache, new_society_cache)
new_society_cache[user_id] = session_id
return if new_society_cache[user_id].eql?(session_id)
 new_society_cache[user_id] = "" if new_society_cache[user_id].blank?
new_society_cache = old_society_cache
old_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
Cache.sadd(society, {}) if society_cache.blank?
society_cache = Cache.sfetch(aoa_number)
session_id = "testing"
Cache.supdate(aoa_number, old_society_cache, society_cache)
old_society_cache
old_society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
Cache.supdate(aoa_number, society_cache)
society_cache[user_id].push(session_id)
society_cache[user_id].include?(session_id)
society_cache[user_id] = [] if society_cache[user_id].blank?
society_cache = JSON.parse(Cache.sfetch(aoa_number).first)
society_cache = JSON.parse(Cache.sfetch(aoa_number))
Cache.sadd(society, {}) if society_cache.blank?
society_cache = Cache.sfetch(aoa_number)
JSON.parse(society_cache.first)
society_cache = Cache.sfetch(aoa_number)
aoa_number = society
society_cache = Cache.sfetch(aoa_number)
Cache.sadd(society, {})
Cache.sfetch(society)
Cache.get(society)
society
#Cache.get(society
Cache.sadd("sample_key", "sample_value")
c
Cache.sadd("sample_key", "sample_value")
c
Token::JsonWebTokenUtils.encode({aoa_number: society.aoa_number, user_id: user_params["id"]})
user_params["id"]
user_params[:id]
Token::JsonWebTokenUtils.encode({aoa_number: society.aoa_number, user_id: user_params[:id]})
society
c
exit
society
exit
@society
society
Token::JsonWebTokenUtils.encode({aoa_number: society.aoa_number, user_id: user_params[:id]})
Token::JsonWebTokenUtils.encode({aoa_number: Token.JsonWebTokenUtils.encode(society.aoa_number, t})
Token::JsonWebTokenUtils
include Token
JsonWebTokenUtils
require_relative "lib/authentication/jwt.rb"
require_relative "./authentication/jwt.rb"
require_relative "./../authentication/jwt.rb"
JsonWebTokenUtils
user_params
exit
user_params
exit
user_params
exit
u1.as_json
u1 = User.new(id: 10)
User.new(id: 10)
user_details.merge!({id: User.find_by(idp_service_id: user_details["_id"]).id})
User.find_by(idp_service_id: user_details["_id"])
user_details
UserLib.new(user_details, society)
exit
UserLib.new(user_details, society)
society
exit
user_salted_password == db_salted_password
db_salted_password = user_details["password"]
user_salted_password = symbolized_params(:user_login)[:password]
c
record_details
c
UserLib.new({id: User.find_by(id: JsonWebTokenUtils.decode(user_edit_params[:id], true).first["id"]), password: user_edit_params[:password]}, society)
c
record_details
exit
record_details
record_filter
c
UserLib.new({id: User.find_by(id: JsonWebTokenUtils.decode(user_edit_params[:id], true).first["id"])}, society)
UserLib.new({id: User.find_by(id: JsonWebTokenUtils.decode(user_edit_params[:id], true)).first["id"]}, society)
exit
UserLib.new({id: User.find_by(id: JsonWebTokenUtils.decode(user_edit_params[:id], true).first["id"])}, society).change_password
UserLib.new({id: User.find_by(id: JsonWebTokenUtils.decode(user_edit_params[:id], true).first["id"]}), society).change_password
UserLib.new({id: User.find_by(id: JsonWebTokenUtils.decode(user_edit_params[:id], true).first["id"]}, society).change_password
JsonWebTokenUtils.decode(user_edit_params[:id], true).first["id"]
JsonWebTokenUtils.decode(user_edit_params[:id], true)).first["id"]
exit
JsonWebTokenUtils.decode("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEifQ.KufH6xXk6sab1NDr6OE80SJLKE56tiLYjDcNW3KtHrU", true).first["id"]
JsonWebTokenUtils.decode("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEifQ.KufH6xXk6sab1NDr6OE80SJLKE56tiLYjDcNW3KtHrU", true).first
JsonWebTokenUtils.decode("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEifQ.KufH6xXk6sab1NDr6OE80SJLKE56tiLYjDcNW3KtHrU", true)
JsonWebTokenUtils.decode(user_edit_params[:id], true)
c
symbolized_params(:user).permit(
      :telegram_username,
      :first_name,
      :last_name,
      :email,
      :phone,
      :id,
      :is_active,
      :password
    )
c
exit
symbolized_params.require(:user)
params.require(:user)
params.require(:user(
h1 = symbolized_params(:user).permit(
      :telegram_username,
      :first_name,
      :last_name,
      :email,
      :phone,
      :is_active,
      :password
    )
symbolized_params(:user).permit(
      :telegram_username,
      :first_name,
      :last_name,
      :email,
      :phone,
      :is_active,
      :password
    )
params
symbolized_params("user").permit(:password)
symbolized_params("user")
symbolized_params(:user).permit(:email, :password)
symbolized_params(:user)
c
exit
user_obj = UserLib.new({id: User.find_by(id: user_edit_exitparams[:id]).id}, society)
user_obj = UserLib.new({id: User.find_by(id: user_edit_params[:id]).id}, society)
c
